"""
Django settings for cloud_detection_portal project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config, Csv
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-&qrfp3c9n((d+^yv!yr0j#3x^x4gow&$$1l&&)%o9fmij)%ss=')

# Environment Configuration
# Set ENVIRONMENT to 'local' for development, 'production' for production
ENVIRONMENT = config('ENVIRONMENT', default='local')  # 'local' or 'production'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ENVIRONMENT == 'local'  # True for local, False for production

# Host configuration
ALLOWED_HOSTS = config(
    'ALLOWED_HOSTS',
    default='localhost,127.0.0.1,tropical-cloud-detection-1065844967286.us-central1.run.app,tropical-cloud-detection-yowzoapc2q-uc.a.run.app,8080-cs-15438411-b0b1-4166-8d53-738b145e4280.cs-asia-southeast1-kelp.cloudshell.dev',
    cast=Csv()
)
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'cloud_detection',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Enable for production
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'cloud_detection_portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cloud_detection_portal.wsgi.application'

# Database Configuration for Cloud Run
# Use PostgreSQL in production if DATABASE_URL is provided, otherwise SQLite
database_url = config('DATABASE_URL', default='')

if ENVIRONMENT == 'production' and database_url:
    # Production PostgreSQL configuration
    DATABASES = {
        'default': dj_database_url.config(
            default=database_url,
            conn_max_age=600,
            conn_health_checks=True,
        )
    }
    print("üóÑÔ∏è Using PostgreSQL database for production")
else:
    # SQLite configuration (for local development or production fallback)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
            'OPTIONS': {
                'timeout': 20,
            }
        }
    }
    print("üóÑÔ∏è Using SQLite database")

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# WhiteNoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (User uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# File upload settings for Cloud Run (32MB max for Cloud Run compatibility)
FILE_UPLOAD_MAX_MEMORY_SIZE = 32 * 1024 * 1024  # 32MB for Cloud Run compatibility
DATA_UPLOAD_MAX_MEMORY_SIZE = 32 * 1024 * 1024   # 32MB for Cloud Run compatibility
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000               # Allow more form fields

# Upload timeout settings
FILE_UPLOAD_TIMEOUT = 300  # 5 minutes timeout for uploads

# CORS settings
if ENVIRONMENT == 'local':
    # Local development - allow all origins for testing
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",
        "http://127.0.0.1:8000",
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://localhost:8080",
        "http://127.0.0.1:8080",
        "https://8080-cs-15438411-b0b1-4166-8d53-738b145e4280.cs-asia-southeast1-kelp.cloudshell.dev",
    ]
    CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins in local mode
    print("üîì CORS: All origins allowed for local development")
else:
    # Production - strict CORS
    CORS_ALLOWED_ORIGINS = config(
        'CORS_ALLOWED_ORIGINS',
        default="https://tropical-cloud-detection-1065844967286.us-central1.run.app",
        cast=Csv()
    )
    CORS_ALLOW_ALL_ORIGINS = False
    print("üîí CORS: Strict origins for production")

CORS_ALLOW_CREDENTIALS = True

# CSRF settings based on environment
if ENVIRONMENT == 'local':
    # Local development - allow all origins for CSRF
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost:8080',
        'http://127.0.0.1:8080',
        'https://8080-cs-15438411-b0b1-4166-8d53-738b145e4280.cs-asia-southeast1-kelp.cloudshell.dev',
    ]
    print("üîì CSRF: All local origins trusted for development")
else:
    # Production - strict CSRF
    CSRF_TRUSTED_ORIGINS = config(
        'CSRF_TRUSTED_ORIGINS', 
        default='https://tropical-cloud-detection-1065844967286.us-central1.run.app',
        cast=Csv()
    )
    print("üîí CSRF: Strict origins for production")

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FileUploadParser',
    ],
}

# Security settings based on environment
if ENVIRONMENT == 'production':
    # Production security settings
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    
    # Additional security headers
    X_FRAME_OPTIONS = 'DENY'
    print("üîí Production security settings enabled")
else:
    # Local development - relaxed security for easier testing
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SECURE_CONTENT_TYPE_NOSNIFF = False
    SECURE_BROWSER_XSS_FILTER = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    X_FRAME_OPTIONS = 'SAMEORIGIN'
    print("üîì Local development - relaxed security for testing")

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Google Cloud Storage Configuration for Cloud Run
GCS_BUCKET_NAME = config('GCS_BUCKET_NAME', default='tropical-cloud-detection-uploads')
GOOGLE_CLOUD_PROJECT = config('GOOGLE_CLOUD_PROJECT', default='tropical-cloud-detection')
