name: Deploy to Google Compute Engine

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: tropical-cloud-detection
        
    - name: Debug - Check VM Status
      run: |
        echo "🔍 Checking VM status..."
        gcloud compute instances list --filter="name=tropical-cloud-app"
        echo "📊 VM details:"
        gcloud compute instances describe tropical-cloud-app --zone=asia-southeast1-a --format="table(name,status,machineType,networkInterfaces[0].accessConfigs[0].natIP)"
        
    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        set -x
        
        # Create a clean directory for packaging
        mkdir -p /tmp/deploy
        cp -r . /tmp/deploy/
        cd /tmp/deploy
        
        # Remove unwanted files and directories
        rm -rf .git venv __pycache__ *.pyc .env* db.sqlite3* media staticfiles key.json gcp-github-actions*
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Create tar archive from clean directory
        tar -czf /tmp/app.tar.gz .
        mv /tmp/app.tar.gz /home/runner/work/TropicalCloudDetection/TropicalCloudDetection/
        cd /home/runner/work/TropicalCloudDetection/TropicalCloudDetection/
        
        ls -la app.tar.gz
        echo "✅ Package created successfully"
        
    - name: Upload to Cloud Storage
      run: |
        echo "📤 Uploading to Cloud Storage..."
        set -x
        gsutil cp app.tar.gz gs://tropical-cloud-detection-uploads/deployment/app.tar.gz
        echo "✅ Upload completed"
        
    - name: Create improved startup script
      run: |
        echo "📝 Creating improved startup script..."
        cat > startup.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Download the latest code
        gsutil cp gs://tropical-cloud-detection-uploads/deployment/app.tar.gz /tmp/app.tar.gz
        
        # Setup directory
        sudo mkdir -p /opt/tropical-cloud-detection
        cd /opt/tropical-cloud-detection
        
        # Extract files
        sudo tar -xzf /tmp/app.tar.gz
        
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-venv nginx build-essential libhdf5-dev libnetcdf-dev pkg-config
        
        # Create virtual environment
        sudo python3 -m venv venv
        
        # Install Python packages
        source venv/bin/activate
        sudo venv/bin/pip install -r requirements.txt
        
        # Run migrations
        sudo venv/bin/python manage.py migrate
        
        # Collect static files
        sudo venv/bin/python manage.py collectstatic --noinput
        
        # Stop existing processes
        sudo pkill -f gunicorn || true
        sleep 2
        
        # Create systemd service for auto-restart
        echo "🔧 Creating systemd service..."
        sudo tee /etc/systemd/system/tropical-cloud-detection.service > /dev/null << 'SERVICE_EOF'
        [Unit]
        Description=Tropical Cloud Detection Django Application
        After=network.target
        
        [Service]
        Type=exec
        User=root
        Group=root
        WorkingDirectory=/opt/tropical-cloud-detection
        Environment=PATH=/opt/tropical-cloud-detection/venv/bin
        EnvironmentFile=/opt/tropical-cloud-detection/.env
        ExecStart=/opt/tropical-cloud-detection/venv/bin/gunicorn \\
            --bind 127.0.0.1:8000 \\
            --workers 2 \\
            --worker-class sync \\
            --timeout 600 \\
            --max-requests 100 \\
            --max-requests-jitter 10 \\
            --preload \\
            --access-logfile /opt/tropical-cloud-detection/logs/django.log \\
            --error-logfile /opt/tropical-cloud-detection/logs/django-error.log \\
            cloud_detection_portal.wsgi:application
        Restart=always
        RestartSec=10
        StandardOutput=journal
        StandardError=journal
        
        [Install]
        WantedBy=multi-user.target
        SERVICE_EOF
        
        # Create logs directory
        sudo mkdir -p /opt/tropical-cloud-detection/logs
        sudo chmod 755 /opt/tropical-cloud-detection/logs
        
        # Reload systemd and enable service
        sudo systemctl daemon-reload
        sudo systemctl enable tropical-cloud-detection
        
        # Start the service
        sudo systemctl start tropical-cloud-detection
        
        # Wait for Gunicorn to start
        echo "⏳ Waiting for Gunicorn to start..."
        for i in {1..30}; do
          if curl -s http://127.0.0.1:8000/ > /dev/null 2>&1; then
            echo "✅ Gunicorn is ready"
            break
          fi
          sleep 1
        done
        
        # Setup Nginx
        echo "🔧 Setting up Nginx..."
        sudo tee /etc/nginx/sites-available/tropical-cloud-detection > /dev/null << 'NGINX_EOF'
        server { 
          listen 8080; 
          server_name _; 
          client_max_body_size 200M; 
          
          location /static/ { 
            alias /opt/tropical-cloud-detection/staticfiles/; 
            expires 1y;
            add_header Cache-Control "public, immutable";
          } 
          
          location /media/ { 
            alias /opt/tropical-cloud-detection/media/; 
          } 
          
          location / { 
            proxy_pass http://127.0.0.1:8000; 
            proxy_set_header Host $host; 
            proxy_set_header X-Real-IP $remote_addr; 
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
          } 
        }
        NGINX_EOF
        
        sudo ln -sf /etc/nginx/sites-available/tropical-cloud-detection /etc/nginx/sites-enabled/
        sudo rm -f /etc/nginx/sites-enabled/default
        sudo nginx -t && sudo systemctl restart nginx
        
        # Create health check script
        sudo tee /opt/tropical-cloud-detection/health_check.sh > /dev/null << 'HEALTH_EOF'
        #!/bin/bash
        if ! curl -s http://127.0.0.1:8000/ > /dev/null 2>&1; then
          echo "$(date): Health check failed, restarting service..."
          sudo systemctl restart tropical-cloud-detection
        fi
        HEALTH_EOF
        
        sudo chmod +x /opt/tropical-cloud-detection/health_check.sh
        
        # Add health check to crontab
        echo "*/5 * * * * /opt/tropical-cloud-detection/health_check.sh" | sudo crontab -
        
        echo "✅ Deployment completed!"
        echo "🔧 Service status:"
        sudo systemctl status tropical-cloud-detection --no-pager
        EOF
        
        echo "✅ Improved startup script created"
        
    - name: Upload startup script
      run: |
        echo "📤 Uploading startup script..."
        gsutil cp startup.sh gs://tropical-cloud-detection-uploads/deployment/startup.sh
        echo "✅ Startup script uploaded"
        
    - name: Execute deployment on VM
      run: |
        echo "🚀 Executing deployment on VM..."
        set -x
        
        # Download and execute startup script on VM
        gcloud compute ssh tropical-cloud-app --zone=asia-southeast1-a --command="gsutil cp gs://tropical-cloud-detection-uploads/deployment/startup.sh /tmp/startup.sh && chmod +x /tmp/startup.sh && sudo /tmp/startup.sh" || {
          echo "❌ Deployment failed"
          exit 1
        }
        
        echo "✅ Deployment executed"
        
    - name: Wait for services
      run: |
        echo "⏳ Waiting for services to start..."
        sleep 30
        
    - name: Test application
      run: |
        echo "🔍 Testing application..."
        set -x
        EXTERNAL_IP=$(gcloud compute instances describe tropical-cloud-app --zone=asia-southeast1-a --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        echo "🌐 Testing URL: http://$EXTERNAL_IP:8080/"
        
        # Test with curl and capture detailed output
        curl -v -f http://$EXTERNAL_IP:8080/ || {
          echo "❌ Application test failed"
          echo "🔍 Checking VM status:"
          gcloud compute ssh tropical-cloud-app --zone=asia-southeast1-a --command="sudo systemctl status tropical-cloud-detection --no-pager" || echo "SSH failed"
          gcloud compute ssh tropical-cloud-app --zone=asia-southeast1-a --command="ps aux | grep gunicorn" || echo "SSH failed"
          exit 1
        }
        
        echo "✅ Application is responding!"
        
    - name: Final status
      run: |
        echo "🎉 Deployment completed successfully!"
        EXTERNAL_IP=$(gcloud compute instances describe tropical-cloud-app --zone=asia-southeast1-a --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        echo "🌐 Application URL: http://$EXTERNAL_IP:8080"
        echo "📊 Service logs: gcloud compute ssh tropical-cloud-app --zone=asia-southeast1-a --command='sudo journalctl -u tropical-cloud-detection -f'"
        echo "🔧 Service status: gcloud compute ssh tropical-cloud-app --zone=asia-southeast1-a --command='sudo systemctl status tropical-cloud-detection'"