name: Deploy to Google Compute Engine

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: tropical-cloud-detection
        
    - name: Debug - Check VM Status
      run: |
        echo "🔍 Checking VM status..."
        gcloud compute instances list --filter="name=tropical-cloud-app"
        echo "📊 VM details:"
        gcloud compute instances describe tropical-cloud-app --zone=asia-southeast1-a --format="table(name,status,machineType,networkInterfaces[0].accessConfigs[0].natIP)"
        
    - name: Create deployment package
      run: |
        echo "📦 Creating deployment package..."
        set -x
        
        # Create a clean directory for packaging
        mkdir -p /tmp/deploy
        cp -r . /tmp/deploy/
        cd /tmp/deploy
        
        # Remove unwanted files and directories
        rm -rf .git venv __pycache__ *.pyc .env* db.sqlite3* media staticfiles key.json gcp-github-actions*
        find . -name "*.pyc" -delete
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        
        # Create tar archive from clean directory
        tar -czf /tmp/app.tar.gz .
        mv /tmp/app.tar.gz /home/runner/work/TropicalCloudDetection/TropicalCloudDetection/
        cd /home/runner/work/TropicalCloudDetection/TropicalCloudDetection/
        
        ls -la app.tar.gz
        echo "✅ Package created successfully"
        
    - name: Upload to Cloud Storage
      run: |
        echo "📤 Uploading to Cloud Storage..."
        set -x
        gsutil cp app.tar.gz gs://tropical-cloud-detection-uploads/deployment/app.tar.gz
        echo "✅ Upload completed"
        
    - name: Create startup script
      run: |
        echo "📝 Creating startup script..."
        cat > startup.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Download the latest code
        gsutil cp gs://tropical-cloud-detection-uploads/deployment/app.tar.gz /tmp/app.tar.gz
        
        # Setup directory
        sudo mkdir -p /opt/tropical-cloud-detection
        cd /opt/tropical-cloud-detection
        
        # Extract files
        sudo tar -xzf /tmp/app.tar.gz
        
        # Install system dependencies
        sudo apt-get update
        sudo apt-get install -y python3 python3-pip python3-venv nginx build-essential libhdf5-dev libnetcdf-dev pkg-config
        
        # Create virtual environment
        sudo python3 -m venv venv
        
        # Install Python packages
        source venv/bin/activate
        sudo venv/bin/pip install -r requirements.txt
        
        # Run migrations
        sudo venv/bin/python manage.py migrate
        
        # Collect static files
        sudo venv/bin/python manage.py collectstatic --noinput
        
        # Stop existing processes
        sudo pkill -f gunicorn || true
        
        # Start Gunicorn
        nohup sudo venv/bin/gunicorn --bind 127.0.0.1:8000 --workers 4 --timeout 600 cloud_detection_portal.wsgi:application > gunicorn.log 2>&1 &
        
        # Setup Nginx
        echo 'server { listen 8080; server_name _; client_max_body_size 200M; location /static/ { alias /opt/tropical-cloud-detection/staticfiles/; } location /media/ { alias /opt/tropical-cloud-detection/media/; } location / { proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } }' | sudo tee /etc/nginx/sites-available/tropical-cloud-detection
        
        sudo ln -sf /etc/nginx/sites-available/tropical-cloud-detection /etc/nginx/sites-enabled/
        sudo rm -f /etc/nginx/sites-enabled/default
        sudo systemctl restart nginx
        
        echo "✅ Deployment completed!"
        EOF
        
        echo "✅ Startup script created"
        
    - name: Upload startup script
      run: |
        echo "📤 Uploading startup script..."
        gsutil cp startup.sh gs://tropical-cloud-detection-uploads/deployment/startup.sh
        echo "✅ Startup script uploaded"
        
    - name: Execute deployment on VM
      run: |
        echo "🚀 Executing deployment on VM..."
        set -x
        
        # Download and execute startup script on VM
        gcloud compute ssh tropical-cloud-app --zone=asia-southeast1-a --command="gsutil cp gs://tropical-cloud-detection-uploads/deployment/startup.sh /tmp/startup.sh && chmod +x /tmp/startup.sh && /tmp/startup.sh" || {
          echo "❌ Deployment failed, trying alternative approach..."
          
          # Alternative: Use gcloud compute instances update-container
          gcloud compute instances update-container tropical-cloud-app --zone=asia-southeast1-a --container-image=gcr.io/tropical-cloud-detection/app:latest || {
            echo "❌ Container update also failed"
            exit 1
          }
        }
        
        echo "✅ Deployment executed"
        
    - name: Wait for services
      run: |
        echo "⏳ Waiting for services to start..."
        sleep 30
        
    - name: Test application
      run: |
        echo "🔍 Testing application..."
        set -x
        EXTERNAL_IP=$(gcloud compute instances describe tropical-cloud-app --zone=asia-southeast1-a --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        echo "🌐 Testing URL: http://$EXTERNAL_IP:8080/"
        
        # Test with curl and capture detailed output
        curl -v -f http://$EXTERNAL_IP:8080/ || {
          echo "❌ Application test failed"
          echo "🔍 Checking VM status:"
          gcloud compute ssh tropical-cloud-app --zone=asia-southeast1-a --command="ps aux | grep gunicorn" || echo "SSH failed"
          exit 1
        }
        
        echo "✅ Application is responding!"
        
    - name: Final status
      run: |
        echo "🎉 Deployment completed successfully!"
        EXTERNAL_IP=$(gcloud compute instances describe tropical-cloud-app --zone=asia-southeast1-a --format="value(networkInterfaces[0].accessConfigs[0].natIP)")
        echo "🌐 Application URL: http://$EXTERNAL_IP:8080"
        echo "📊 Logs: gcloud compute ssh tropical-cloud-app --zone=asia-southeast1-a --command='tail -f /opt/tropical-cloud-detection/gunicorn.log'"